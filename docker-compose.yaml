x-airflow-common: &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.5.1}
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ""
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "true"
    AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session"
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  # ---------------------------------------------------------
  # Airflow metadata database (Postgres)
  # ---------------------------------------------------------
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  # ---------------------------------------------------------
  # Redis (Celery broker)
  # ---------------------------------------------------------
  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  # ---------------------------------------------------------
  # Operativna baza (db_operational)
  # ---------------------------------------------------------
  db_operational:
    ports:
      - "5433:5432"
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: napoleonlm10
      POSTGRES_DB: db_operational
    volumes:
      - db-operational-volume:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
      - ./data:/data # mapira lokalni folder gdje se nalazi CSV
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5
    restart: always

  # ---------------------------------------------------------
  # Analitička baza (db_analytical)
  # ---------------------------------------------------------
  db_analytical:
    ports:
      - "5434:5432"
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: napoleonlm10
      POSTGRES_DB: db_analytical
    volumes:
      - db-analytical-volume:/var/lib/postgresql/data
      - ./init-scripts-analytical:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5
    restart: always

  # ---------------------------------------------------------
  # Airflow Webserver
  # ---------------------------------------------------------
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # ---------------------------------------------------------
  # Airflow Scheduler
  # ---------------------------------------------------------
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"',
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # ---------------------------------------------------------
  # Airflow Worker (Celery)
  # ---------------------------------------------------------
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # ---------------------------------------------------------
  # Airflow Triggerer
  # ---------------------------------------------------------
  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"',
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # ---------------------------------------------------------
  # Airflow Initialization
  # ---------------------------------------------------------
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        # Provjera verzije Airflow-a
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        # Inicijalizacija Airflow DB i korisnika
        airflow db upgrade
        airflow users create \
          --username airflow \
          --firstname Air \
          --lastname Flow \
          --role Admin \
          --email airflow@example.com \
          --password airflow

        #
        # 3) Automatsko dodavanje Airflow konekcija za operativnu i analitičku bazu
        airflow connections add '_operational' \
          --conn-uri 'postgresql+psycopg2://postgres:napoleonlm10@db_operational:5432/db_operational'

        airflow connections add 'db_analytical' \
          --conn-uri 'postgresql+psycopg2://postgres:napoleonlm10@db_analytical:5432/db_analytical'

        airflow connections add 'postgres_analytical' \
          --conn-uri 'postgresql+psycopg2://postgres:napoleonlm10@db_analytical:5432/db_analytical'

        # 4) Automatsko dodavanje Airflow konekcija za operativnu i analitičku bazu
        airflow connections add 'postgres_operational' \
          --conn-uri 'postgresql+psycopg2://postgres:napoleonlm10@db_operational:5432/db_operational'

        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ""
    user: "0:0"
    volumes:
      - .:/sources

  # ---------------------------------------------------------
  # Airflow CLI Container (debug)
  # ---------------------------------------------------------
  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

  # ---------------------------------------------------------
  # Celery Flower (monitoring)
  # ---------------------------------------------------------
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  # ---------------------------------------------------------
  # CO2 Factors API and Price API
  # co2-api:
  #   build:
  #     context: ./api
  #   image: project_co2_api:latest
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     - DB_HOST=db_operational
  #   command: uvicorn co2_factors_api:app --host 0.0.0.0 --port 8000
  #   depends_on:
  #     - db_operational

  # # ---------------------------------------------------------
  # # Price API
  # price-api:
  #   build:
  #     context: ./api
  #   image: project_price_api:latest
  #   ports:
  #     - "8001:8001"
  #   environment:
  #     - DB_HOST=db_operational
  #   command: uvicorn electricity_prices_api:app --host 0.0.0.0 --port 8001
  #   depends_on:
  #     - db_operational

volumes:
  postgres-db-volume:
  db-operational-volume:
  db-analytical-volume:
